{
  "usememo": {
    "prefix": "usememo",
    "body": [
      "import React, { useMemo } from 'react';",
      "",
      "function ExpensiveComponent({ data }: { data: number[] }) {",
      "  const sum = useMemo(() => {",
      "    return data.reduce((acc, val) => acc + val, 0);",
      "  }, [data]);",
      "",
      "  return <p>Sum: {sum}</p>;",
      "}"
    ]
  },
  "cont": {
    "prefix": "cont",
    "body": [
      "export const ${1} = createContext();",
      "<${1} value={${2}}>",
      "  ${3}",
      "</${1}.Provider>"
    ]
  },
  "usecallback": {
    "prefix": "usecallback",
    "body": [
      "const callbackAtualizado = useCallback(() => {",
      "    console.log('callbackAtualizado:', contador);",
      "}, [contador]);"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if(${1:}) {",
      "    ${2:}",
      "}"
    ]
  },
  "usestate": {
    "prefix": "usestate",
    "body": [
      "import { useState, useContext } from \"react\";",
      "const [mystate, setMyState] = useState(\"something else\");",
      "setMyState(\"Hello World\");"
    ]
  },
  "fun": {
    "prefix": "fun",
    "body": [
      "function NewComponent() {",
      "  return (",
      "    <p>hello</p>",
      "  )",
      "}"
    ]
  },
  "state": {
    "prefix": "state",
    "body": [
      "import { useState } from \"react\";",
      "const [${1:state}, ${2:setState}] = useState(${3:initialState});"
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "{(",
      "  ${1:list}.map((${2:item}) => {",
      "    return (",
      "      <li key={${2:item}.id}>",
      "        {${2:item}.name}",
      "      </li>",
      "    )",
      "  })",
      ")}"
    ]
  },
  "button": {
    "prefix": "button",
    "body": [
      "<button onClick={() => {",
      "  ${1:console.log('button')}",
      "}}>${2:name}</button>"
    ]
  },
  "route": {
    "prefix": "route",
    "body": [
      "import { BrowserRouter as Router, Route } from 'react-router-dom';",
      "<Router path=\"${1:path}\" component={${2:component} />"
    ]
  },
  "select": {
    "prefix": "select",
    "body": [
      "<select value={selectedOption} onChange={(event) => setSelectedOption(event.target.value)}>",
      "  <option value=\"option1\">Option 1</option>",
      "  <option value=\"option2\">Option 2</option>",
      "  <option value=\"option3\">Option 3</option>",
      "</select>"
    ]
  },
  "form": {
    "prefix": "form",
    "body": [
      "<Form method=\"post\">",
      "</Form>"
    ]
  },
  "post": {
    "prefix": "post",
    "body": [
      "try {",
      "  const data = {",
      "    name: updates.name,",
      "    done: 'false',",
      "  };",
      "  const response = await fetch('/todos', {",
      "    method: 'POST',",
      "    headers: {",
      "      \"Content-Type\": \"application/json\",",
      "      \"X-CSRF-Token\": document.querySelector(\"meta[name='csrf-token']\").content,",
      "    },",
      "    body: JSON.stringify(data),",
      "  })",
      "",
      "  if (!response.ok) {",
      "    throw new Error(`HTTP error! Status: ${response.status}`);",
      "  } ",
      "",
      "  const responseData = await response.json();",
      "  console.log(\"responseData: \", responseData);",
      "  return responseData;",
      "} catch(e) {",
      "  console.log(\"Error: \", e);",
      "}"
    ]
  },
  "get": {
    "prefix": "get",
    "body": [
      "try {",
      "  const response = await fetch('/${1:url}', {",
      "    method: 'GET',",
      "    headers: {",
      "      \"Content-Type\": \"application/json\",",
      "      \"X-CSRF-Token\": document.querySelector(\"meta[name='csrf-token']\").content,",
      "    }",
      "  })",
      "",
      "  if (!response.ok) {",
      "    throw new Error(`HTTP error! Status: ${response.status}`);",
      "  } ",
      "",
      "  const responseData = await response.json();",
      "  console.log(\"responseData: \", responseData);",
      "  return responseData;",
      "} catch(e) {",
      "  console.log(\"Error: \", e);",
      "}"
    ]
  },
  "afun": {
    "prefix": "afun",
    "body": [
      "(${1:params}) => {",
      "  ${2:body}",
      "}"
    ]
  },
  "div": {
    "prefix": "div",
    "body": [
      "<div>",
      "</div>"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (let i = 0; i < 100; i++) {",
      "  debounce(() => console.log(\"debounce\"));",
      "}"
    ]
  }
}