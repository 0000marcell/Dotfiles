{
  "before": {
    "prefix": "before",
    "body": [
      "before do",
      "end"
    ],
    "description": "before"
  },
  "let": {
    "prefix": "let",
    "body": [
      "let(:context) { double }"
    ],
    "description": "let"
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "authentication = Struct.new(:param1, :param2) do",
      "      def success?",
      "        true",
      "      end",
      "",
      "      def identity",
      "        UserIdentify.all.first",
      "      end",
      "",
      "      def dealer_id",
      "        Dealer.all.first",
      "      end",
      "    end"
    ],
    "description": "struct"
  },
  "begin rescue": {
    "prefix": [
      "beg",
      "begin"
    ],
    "body": [
      "begin",
      "rescue StandardError => e",
      "puts 'An error occurred'",
      "end"
    ],
    "description": "begin and rescue"
  },
  "write": {
    "prefix": "write",
    "body": [
      "File.open(snippet_path, 'w') do |file|",
      "  file.write(JSON.generate(parsed_data))",
      "end"
    ]
  },
  "input": {
    "prefix": "input",
    "body": [
      "puts \"Language you want to create the snippet for:\"",
      "language_name = gets.chomp"
    ]
  },
  "csvread": {
    "prefix": "csvread",
    "body": [
      "require 'csv'",
      "",
      "csv_file_path = '/home/mmc/Decisiv/solve_duplication/hinos-that-would-be-deleted-allen-list.csv'",
      "",
      "CSV.foreach(csv_file_path, headers: true) do |row|",
      "  puts \"#{row['__v_vin']} \"",
      "end"
    ]
  },
  "read": {
    "prefix": "read",
    "body": [
      "file_path = 'path/to/your/example.txt'",
      "lines_array = File.readlines(file_path, chomp: true)",
      "lines_array.each do |line|",
      "  puts line",
      "end"
    ]
  },
  "around": {
    "prefix": "around",
    "body": [
      "around do |example|",
      "    ENV['SERVICE_PROVIDER_ID'] = service_provider.id",
      "    ENV['CUSTOMER_CSV_FILE'] = \"spec/fixtures/data/elsa_customer_file.csv\"",
      "    ENV['DECISIV_USERNAME'] = user.username",
      "    example.run",
      "    ENV.delete('SERVICE_PROVIDER_ID')",
      "    ENV.delete('CUSTOMER_CSV_FILE')",
      "    ENV.delete('DECISIV_USERNAME')",
      "  end"
    ]
  },
  "expect": {
    "prefix": "expect",
    "body": [
      "expect(1).to eq(1)"
    ]
  },
  "query": {
    "prefix": "query",
    "body": [
      "ActiveRecord::Base.connection.exec_query(%Q{select * from ..})"
    ]
  },
  "con": {
    "prefix": "con",
    "body": [
      "#{${1}}"
    ]
  },
  "rget": {
    "prefix": "rget",
    "body": [
      "get '/${1}', to: '${2}#${3}'"
    ]
  },
  "rput": {
    "prefix": "rput",
    "body": [
      "put '/${1}/:id', to: '${2}#${3}'"
    ]
  },
  "rpost": {
    "prefix": "rpost",
    "body": [
      "post '/${1}', to: '${2}#${3}'"
    ]
  },
  "rdelete": {
    "prefix": "rdelete",
    "body": [
      "delete '/${1}', to: ${2}#${3}"
    ]
  },
  "deletefile": {
    "prefix": "deletefile",
    "body": [
      "File.delete('./duplicates_test')"
    ]
  },
  "jsonread": {
    "prefix": "jsonread",
    "body": [
      "require 'json'",
      "parsed = JSON.parse(File.read(file_path))"
    ]
  },
  "redirect": {
    "prefix": "redirect",
    "body": [
      "redirect_to ${1:todos_path}, alert: \"Not authorized to edit this todo\""
    ]
  },
  "format": {
    "prefix": "format",
    "body": [
      "format.${1:} do",
      "  ${2:}",
      "end"
    ]
  },
  "respond": {
    "prefix": "respond",
    "body": [
      "respond_to do |format|",
      "  ${1:}",
      "end"
    ]
  },
  "test": {
    "prefix": "test",
    "body": [
      "require 'rails_helper'",
      "",
      "RSpec.describe ${1:\"this is a test\"}, type: ${2:type} do",
      "end"
    ]
  },
  "json": {
    "prefix": "json",
    "body": [
      "require 'json'",
      "",
      "# Specify the path to your JSON file",
      "file_path = 'path/to/your/data.json'",
      "",
      "# Read JSON data from the file",
      "begin",
      "  json_data = JSON.parse(File.read(file_path))",
      "",
      "  # Access data from the parsed JSON",
      "  puts \"Name: #{json_data['name']}\"",
      "  puts \"Age: #{json_data['age']}\"",
      "  puts \"City: #{json_data['city']}\"",
      "rescue JSON::ParserError => e",
      "  puts \"Error parsing JSON: #{e.message}\"",
      "rescue Errno::ENOENT",
      "  puts \"File not found: #{file_path}\"",
      "end"
    ]
  },
  "db": {
    "prefix": "db",
    "body": [
      "require 'pg'",
      "",
      "# Connection parameters",
      "db_params = {",
      "  host: 'your_host',      # replace with your PostgreSQL host",
      "  port: 'your_port',      # replace with your PostgreSQL port",
      "  dbname: 'your_database', # replace with your database name",
      "  user: 'your_username',   # replace with your database username",
      "  password: 'your_password' # replace with your database password",
      "}",
      "",
      "begin",
      "  # Connect to the PostgreSQL database",
      "  conn = PG.connect(db_params)",
      "",
      "  # Execute a simple query",
      "  result = conn.exec('SELECT version()')",
      "",
      "  # Output the result",
      "  puts \"PostgreSQL version: #{result[0]['version']}\"",
      "",
      "rescue PG::Error => e",
      "  puts \"Error connecting to the database: #{e.message}\"",
      "",
      "ensure",
      "  # Close the database connection",
      "  conn.close if conn",
      "end"
    ]
  },
  "allow": {
    "prefix": "allow",
    "body": [
      "allow(EstimateTotals::CalculatesEstimateItemFleetPrice).to receive(:new)",
      "        .and_return(calculate_estimate_item_double)"
    ]
  },
  "double": {
    "prefix": "double",
    "body": [
      "instance_double(EstimateTotals::CalculatesEstimateItemFleetPrice)"
    ]
  },
  "class_double": {
    "prefix": "class_double",
    "body": [
      "class_double(\"Teta\").as_stubbed_const"
    ]
  },
  "req": {
    "prefix": "req",
    "body": [
      "require '${1:}'"
    ]
  },
  "begin": {
    "prefix": "begin",
    "body": [
      "begin",
      "  ${1:body}",
      "rescue StandardError => e",
      "  puts \"Error: #{e}\"",
      "  ${2:rbody}",
      "end"
    ]
  },
  "case": {
    "prefix": "case",
    "body": [
      "case ${1:} ",
      "when ${2:}",
      "  ${3:}",
      "else",
      "end"
    ]
  },
  "attr": {
    "prefix": "attr",
    "body": [
      "attr_reader :${1}"
    ]
  },
  "expectoutput": {
    "prefix": "expectoutput",
    "body": [
      "expect {",
      "    described_class.handle(event: multiple_vehicles_sqs_message, context: context)",
      "}.to output(",
      "    /Error fetching trip data/",
      ").to_stdout_from_any_process"
    ]
  },
  "expectraise": {
    "prefix": "expectraise",
    "body": [
      "expect {",
      "  result = 1 + 2",
      "}.not_to raise_error"
    ]
  },
  "classmethods": {
    "prefix": "classmethods",
    "body": [
      "class << self",
      "  ${1}",
      "end"
    ]
  },
  "frozen": {
    "prefix": "frozen",
    "body": [
      "# frozen_string_literal: true"
    ]
  },
  "railsloggermock": {
    "prefix": "railsloggermock",
    "body": [
      "logger = instance_double('logger', info: 'asdf')",
      "allow(Rails).to receive(:logger).and_return(logger)",
      "expect(logger).to receive(:info).with(/That/)"
    ]
  },
  "sharedexamples": {
    "prefix": "sharedexamples",
    "body": [
      "shared_examples \"creates a new vehicle\" do",
      "  it \"creates a new vehicle\" do",
      "    expect(new_dealer_vehicle[:display_year]).to eq(\"2017\")",
      "  end",
      "end",
      "",
      "context 'when on only_insert rule is set' do",
      "  let(:rules) { { 'only_insert' => true } }",
      "  include_examples \"creates a new vehicle\"",
      "end",
      "",
      "context 'when on only_insert rule is not set' do",
      "  include_examples \"creates a new vehicle\"",
      "end"
    ]
  },
  "csv": {
    "prefix": "csv",
    "body": [
      "require 'csv'",
      "",
      "# Define the path to your CSV file",
      "csv_file = 'your_file.csv'",
      "",
      "# Open and read the CSV file with headers",
      "CSV.foreach(csv_file, headers: true) do |row|",
      "  # Access columns by header names",
      "  name = row['Name']",
      "  age = row['Age']",
      "  email = row['Email']",
      "",
      "  # Process data as needed",
      "  puts \"Name: #{name}, Age: #{age}, Email: #{email}\"",
      "end"
    ]
  },
  "crud": {
    "prefix": "crud",
    "body": [
      "class TodosController < ApplicationController",
      "  before_action :authenticate_user!",
      "  before_action :set_todo, only: %i[show edit update destroy]",
      "",
      "  # GET /todos or /todos.json",
      "  def index",
      "    @todos = Todo.all",
      "  end",
      "",
      "  # GET /todos/1 or /todos/1.json",
      "  def show; end",
      "",
      "  # GET /todos/new",
      "  def new",
      "    @todo = Todo.new",
      "  end",
      "",
      "  # GET /todos/1/edit",
      "  def edit; end",
      "",
      "  # POST /todos or /todos.json",
      "  def create",
      "    @todo = Todo.new(todo_params)",
      "    @todo.user = current_user",
      "",
      "    respond_to do |format|",
      "      if @todo.save",
      "        format.html do",
      "          redirect_to todo_url(@todo), notice: 'Todo was successfully created.'",
      "        end",
      "        format.json do",
      "          render :show, status: :created, location: @todo",
      "        end",
      "      else",
      "        format.html do",
      "          render :new, status: :unprocessable_entity",
      "        end",
      "        format.json do",
      "          render json: @todo.errors, status: :unprocessable_entity",
      "        end",
      "      end",
      "    end",
      "  end",
      "",
      "  # PATCH/PUT /todos/1 or /todos/1.json",
      "  def update",
      "    respond_to do |format|",
      "      if @todo.update(todo_params)",
      "        format.html { redirect_to todo_url(@todo), notice: 'Todo was successfully updated.' }",
      "        format.json { render :show, status: :ok, location: @todo }",
      "      else",
      "        format.html { render :edit, status: :unprocessable_entity }",
      "        format.json { render json: @todo.errors, status: :unprocessable_entity }",
      "      end",
      "    end",
      "  end",
      "",
      "  def destroy",
      "    @todo.destroy!",
      "    respond_to do |format|",
      "      format.html { redirect_to todos_url, notice: 'Todo was successfully destroyed.' }",
      "      format.json { head :no_content }",
      "    end",
      "  end",
      "",
      "  private",
      "",
      "  # Use callbacks to share common setup or constraints between actions.",
      "  def set_todo",
      "    @todo = Todo.find(params[:id])",
      "  end",
      "",
      "  # Only allow a list of trusted parameters through.",
      "  def todo_params",
      "    params.require(:todo).permit(:title, :description, :user_id)",
      "  end",
      "end"
    ]
  },
  "readfolder": {
    "prefix": "readfolder",
    "body": [
      "Dir.entries(input_dir)"
    ]
  },
  "callback": {
    "prefix": "callback",
    "body": [
      "before_action :set_user, only: %i[show edit update destroy]"
    ]
  },
  "get": {
    "prefix": "get",
    "body": [
      "require 'net/http'",
      "",
      "uri = URI.parse(${1})",
      "http = Net::HTTP.new(uri.host, uri.port)",
      "http.use_ssl = (uri.scheme == 'https')",
      "request = Net::HTTP::Get.new(uri.path)",
      "response = http.request(request)",
      "${2}"
    ]
  },
  "post": {
    "prefix": "post",
    "body": [
      "require 'httparty'",
      "",
      "url = 'https://jsonplaceholder.typicode.com/posts'",
      "body = {",
      "  title: 'foo',",
      "  body: 'bar',",
      "  userId: 1",
      "}.to_json",
      "",
      "headers = {",
      "  'Content-Type' => 'application/json'",
      "}",
      "",
      "response = HTTParty.post(url, body: body, headers: headers)",
      "",
      "if response.code == 201",
      "  puts \"Post created: #{response.body}\"",
      "else",
      "  puts \"HTTP Request failed with code: #{response.code}\"",
      "end"
    ]
  },
  "assert": {
    "prefix": "assert",
    "body": [
      "assert_equal ${1: }, ${2: }"
    ]
  },
  "stub": {
    "prefix": "stub",
    "body": [
      "${1: class}.stub :${2: method}, ${3: response} do",
      "end"
    ]
  },
  "mmock": {
    "prefix": "mmock",
    "body": [
      "${1}_mock = Minitest::Mock.new",
      "${1}_mock.expect(:${2: key}, ${3: return_value}, ${4: parameters})"
    ]
  },
  "ser": {
    "prefix": "ser",
    "body": [
      "require 'socket'",
      "",
      "server = TCPServer.new(${1}, ${2})",
      "",
      "loop do",
      "  client = server.accept",
      "  request_line = client.gets",
      "  next if request_line.empty?",
      "  _, path = request_line.split",
      "",
      "  response = if path == ${3}",
      "    ${4}  ",
      "  else",
      "    ${5}",
      "  end",
      "  puts response",
      "",
      "  headers = [",
      "    'HTTP/1.1 200 OK',",
      "    'Content-Type: text/html'",
      "  ]",
      "  client.puts headers.join(\"\\r\\n\")",
      "  client.puts \"\\r\\n\"",
      "  client.puts response",
      "  client.close",
      "end"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:} ",
      "  ${2:}",
      "end"
    ]
  }
}