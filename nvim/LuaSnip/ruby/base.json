{
  "before": {
    "prefix": "before",
    "body": [
      "before do",
      "end"
    ],
    "description": "before"
  },
  "let": {
    "prefix": "let",
    "body": [
      "let(:context) { double }"
    ],
    "description": "let"
  },
  "test": {
    "prefix": "test",
    "body": [
      "require_relative '../../spec_helper'",
      "",
      "RSpec.describe PaccarRDSIntegration::Functions::QueueAccounts do",
      "end"
    ],
    "description": "test"
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "authentication = Struct.new(:param1, :param2) do",
      "      def success?",
      "        true",
      "      end",
      "",
      "      def identity",
      "        UserIdentify.all.first",
      "      end",
      "",
      "      def dealer_id",
      "        Dealer.all.first",
      "      end",
      "    end"
    ],
    "description": "struct"
  },
  "begin rescue": {
    "prefix": [
      "beg",
      "begin"
    ],
    "body": [
      "begin",
      "rescue StandardError => e",
      "puts 'An error occurred'",
      "end"
    ],
    "description": "begin and rescue"
  },
  "write": {
    "prefix": "write",
    "body": [
      "File.open(snippet_path, 'w') do |file|",
      "  file.write(JSON.generate(parsed_data))",
      "end"
    ]
  },
  "input": {
    "prefix": "input",
    "body": [
      "puts \"Language you want to create the snippet for:\"",
      "language_name = gets.chomp"
    ]
  },
  "csvread": {
    "prefix": "csvread",
    "body": [
      "require 'csv'",
      "",
      "csv_file_path = '/home/mmc/Decisiv/solve_duplication/hinos-that-would-be-deleted-allen-list.csv'",
      "",
      "CSV.foreach(csv_file_path, headers: true) do |row|",
      "  puts \"#{row['__v_vin']} \"",
      "end"
    ]
  },
  "read": {
    "prefix": "read",
    "body": [
      "file_path = 'path/to/your/example.txt'",
      "lines_array = File.readlines(file_path, chomp: true)",
      "lines_array.each do |line|",
      "  puts line",
      "end"
    ]
  },
  "around": {
    "prefix": "around",
    "body": [
      "around do |example|",
      "    ENV['SERVICE_PROVIDER_ID'] = service_provider.id",
      "    ENV['CUSTOMER_CSV_FILE'] = \"spec/fixtures/data/elsa_customer_file.csv\"",
      "    ENV['DECISIV_USERNAME'] = user.username",
      "    example.run",
      "    ENV.delete('SERVICE_PROVIDER_ID')",
      "    ENV.delete('CUSTOMER_CSV_FILE')",
      "    ENV.delete('DECISIV_USERNAME')",
      "  end"
    ]
  },
  "expect": {
    "prefix": "expect",
    "body": [
      "expect(1).to eq(1)"
    ]
  },
  "query": {
    "prefix": "query",
    "body": [
      "ActiveRecord::Base.connection.exec_query(%Q{select * from ..})"
    ]
  },
  "con": {
    "prefix": "con",
    "body": [
      "#{}"
    ]
  },
  "get": {
    "prefix": "get",
    "body": [
      "get '/${1}', to: '${2}#${3}'"
    ]
  },
  "put": {
    "prefix": "put",
    "body": [
      "put '/${1}/:id', to: '${2}#${3}'"
    ]
  },
  "post": {
    "prefix": "post",
    "body": [
      "post '/${1}', to: '${2}#${3}'"
    ]
  },
  "delete": {
    "prefix": "delete",
    "body": [
      "delete '/${1}', to: ${2}#${3}"
    ]
  },
  "deletefile": {
    "prefix": "deletefile",
    "body": [
      "File.delete('./duplicates_test')"
    ]
  },
  "jsonread": {
    "prefix": "jsonread",
    "body": [
      "require 'json'",
      "parsed = JSON.parse(File.read(file_path))"
    ]
  },
  "redirect": {
    "prefix": "redirect",
    "body": [
      "redirect_to todos_path, alert: \"Not authorized to edit this todo\""
    ]
  }
}