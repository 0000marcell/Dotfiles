{
  "usememo": {
    "prefix": "usememo",
    "body": [
      "import React, { useMemo } from 'react';",
      "",
      "export default function App() {",
      "  const data = [1, 2, 3];",
      "  const sum = useMemo(() => {",
      "    return data.reduce((acc, val) => acc + val, 0);",
      "  }, [data]);",
      "",
      "  return <p>Sum: {sum}</p>;",
      "}"
    ]
  },
  "button": {
    "prefix": "but",
    "body": [
      "<button onClick={${1:handleClick}}>${2:clickme}</button>"
    ]
  },
  "form": {
    "prefix": "form",
    "body": [
      "<Form method=\"post\">",
      "</Form>"
    ]
  },
  "input": {
    "prefix": "input",
    "body": [
      "<input",
      " placeholder=\"name\"",
      " aria-label=\"name\"",
      " type=\"text\"",
      " name=\"name\"",
      " onChange={(e) => {",
      "   setText(e.target.value)  ",
      " }}",
      "/>"
    ]
  },
  "submit": {
    "prefix": "submit",
    "body": [
      "<button type=\"submit\">Save</button>"
    ]
  },
  "div": {
    "prefix": "div",
    "body": [
      "<div>",
      "  ${1:}",
      "</div>"
    ]
  },
  "ul": {
    "prefix": "ul",
    "body": [
      "<ul>",
      "  ${1}",
      "</ul>"
    ]
  },
  "exp": {
    "prefix": "exp",
    "body": [
      "export const ${1} = (${2}) => {",
      "  ${3}",
      "}"
    ]
  },
  "import": {
    "prefix": [
      "import",
      "imp"
    ],
    "body": [
      "import ${1} from '${2}';"
    ]
  },
  "log": {
    "prefix": "log",
    "body": [
      "console.log(\"${1}\", ${2});"
    ]
  },
  "react": {
    "prefix": "react",
    "body": [
      "import React from 'react';"
    ]
  },
  "link": {
    "prefix": "link",
    "body": [
      "<Link to={`${1}`}>${2}</Link>"
    ]
  },
  "loader": {
    "prefix": "loader",
    "body": [
      "export async function loader() {",
      "  const ${1} = await get${2}();",
      "  return { ${1} };",
      "}"
    ]
  },
  "action": {
    "prefix": "act",
    "body": [
      "export async function action() {",
      "  const ${1} = await create${1}();",
      "  return redirect(`${3}`);",
      "}"
    ]
  },
  "li": {
    "prefix": "li",
    "body": [
      "<li>",
      "  ${1:content}",
      "</li>"
    ]
  },
  "post": {
    "prefix": "post",
    "body": [
      "try {",
      "  const data = {",
      "    name: updates.name,",
      "    done: 'false',",
      "  };",
      "  const response = await fetch('/todos', {",
      "    method: 'POST',",
      "    headers: {",
      "      \"Content-Type\": \"application/json\",",
      "      \"X-CSRF-Token\": document.querySelector(\"meta[name='csrf-token']\").content,",
      "    },",
      "    body: JSON.stringify(data),",
      "  })",
      "",
      "  if (!response.ok) {",
      "    throw new Error(`HTTP error! Status: ${response.status}`);",
      "  } ",
      "",
      "  const responseData = await response.json();",
      "  console.log(\"responseData: \", responseData);",
      "  return responseData;",
      "} catch(e) {",
      "  console.log(\"Error: \", e);",
      "}"
    ]
  },
  "get": {
    "prefix": "get",
    "body": [
      "try {",
      "  const response = await fetch('/todos', {",
      "    method: 'GET',",
      "    headers: {",
      "      \"Content-Type\": \"application/json\",",
      "      \"X-CSRF-Token\": document.querySelector(\"meta[name='csrf-token']\").content,",
      "    }",
      "  })",
      "",
      "  if (!response.ok) {",
      "    throw new Error(`HTTP error! Status: ${response.status}`);",
      "  } ",
      "",
      "  const responseData = await response.json();",
      "  console.log(\"responseData: \", responseData);",
      "  return responseData;",
      "} catch(e) {",
      "  console.log(\"Error: \", e);",
      "}"
    ]
  },
  "afun": {
    "prefix": "afun",
    "body": [
      "(${1:}) => {",
      "  ${2:}",
      "}"
    ]
  },
  "comment": {
    "prefix": "comment",
    "body": [
      "{/**/}"
    ]
  },
  "usestate": {
    "prefix": "usestate",
    "body": [
      "const [${1:state}, ${2:function}] = useState(${3:initialValue});"
    ]
  },
  "h2": {
    "prefix": "h2",
    "body": [
      "<h2>${1:value}</h2>"
    ]
  },
  "h1": {
    "prefix": "h1",
    "body": [
      "<h1>${1:value}</h1>"
    ]
  },
  "h3": {
    "prefix": "h3",
    "body": [
      "<h3>${1:value}</h3>"
    ]
  },
  "fun": {
    "prefix": "fun",
    "body": [
      "function ${1:}(${2:}) {",
      "  ${3:}",
      "}"
    ]
  },
  "usetransition": {
    "prefix": "usetransition",
    "body": [
      "const [isPending, startTransition] = useTransition({",
      "  timeoutMs: 3000,",
      "});",
      "",
      "const addItem = () => {",
      "  startTransition(() => {",
      "    setItems([...items, text]);",
      "  });",
      "  setText('');",
      "};"
    ]
  },
  "comp": {
    "prefix": "comp",
    "body": [
      "export default function ${1}() {",
      "  ${2}",
      "  return (",
      "    <div>",
      "      ${3}",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "it": {
    "prefix": "it",
    "body": [
      "it('${1:}', () => {",
      "  ${2:}",
      "});"
    ]
  },
  "getbytest": {
    "prefix": "getbytest",
    "body": [
      "const ${1} = getByTestId('${2}');"
    ]
  },
  "cont": {
    "prefix": "cont",
    "body": [
      "export const ${1} = createContext();",
      "<${1}.Provider value={${2}}>",
      "  ${3}",
      "</${1}.Provider>"
    ]
  },
  "testid": {
    "prefix": "testid",
    "body": [
      "data-testid=\"${1}\""
    ]
  },
  "con": {
    "prefix": "con",
    "body": [
      "{${1}}"
    ]
  },
  "useref": {
    "prefix": "useref",
    "body": [
      "const ref = useRef(0);",
      "ref.current += ref.current++"
    ]
  },
  "fire": {
    "prefix": "fire",
    "body": [
      "const ${1} = screen.getByTestId('${2}') ",
      "fireEvent.click(${1})"
    ]
  },
  "expect": {
    "prefix": "expect",
    "body": [
      "expect(screen.getByText(/Hello World/i)).toBeInTheDocument();"
    ]
  },
  "useeffect": {
    "prefix": "useeffect",
    "body": [
      "useEffect(() => {",
      "  ${2}",
      "}, [${3}]);"
    ]
  },
  "test": {
    "prefix": "test",
    "body": [
      "import React from 'react';",
      "import { render } from '@testing-library/react';",
      "import App from './App';",
      "",
      "test('Renders the component', () => {",
      "  const { getByText } = render(<App />); ",
      "",
      "  const renderedValue = getByText(/Hello World/i);",
      "  expect(renderedValue).toBeInTheDocument();",
      "});"
    ]
  },
  "addtext": {
    "prefix": "addtext",
    "body": [
      "const ${1} = screen.getByTestId('${2}');",
      "fireEvent.change(${1}, { target: { value: 'New Item' } });"
    ]
  },
  "list": {
    "prefix": "list",
    "body": [
      "<ul>",
      "  {items.map((item, index) => {",
      "    return (",
      "      <li key={index}>",
      "        {item}",
      "      </li>",
      "    )",
      "  })}",
      "</ul>"
    ]
  },
  "reactrouterdom": {
    "prefix": "reactrouterdom",
    "body": [
      "import * as React from \"react\";",
      "import * as ReactDOM from \"react-dom/client\";",
      "import \"./index.css\";",
      "import {",
      "  createBrowserRouter,",
      "  RouterProvider,",
      "} from \"react-router-dom\";",
      "import ErrorPage from \"./error-page\";",
      "import Root from \"./routes/root\";",
      "",
      "const router = createBrowserRouter([",
      "  {",
      "    path: \"/\",",
      "    element: <Root />,",
      "    errorElement: <ErrorPage />,",
      "  },",
      "]);",
      "",
      "ReactDOM.createRoot(document.getElementById(\"root\")).render(",
      "  <React.StrictMode>",
      "    <RouterProvider router={router} />",
      "  </React.StrictMode>",
      ");"
    ]
  },
  "route": {
    "prefix": "route",
    "body": [
      "{",
      "  path: '/${1}',",
      "  element: ${2},",
      "  loader: ${3}",
      "}"
    ]
  },
  "navlink": {
    "prefix": "navlink",
    "body": [
      "<NavLink",
      "  to=\"/contacts\"",
      "  className={({ isActive, isPending }) =>",
      "    isPending ? \"pending\" : isActive ? \"active\" : \"\"",
      "  }",
      ">",
      "  Contacts",
      "</NavLink>"
    ]
  },
  "postaction": {
    "prefix": "postaction",
    "body": [
      "export const action = async ({ request, params }) => {",
      "  const formData = await request.formData();",
      "  const data = Object.fromEntries(formData);",
      "  console.log(\"data: \", data);",
      "  return redirect('/');",
      "}"
    ]
  },
  "usedebugvalue": {
    "prefix": "usedebugvalue",
    "body": [
      "import { useState, useEffect, useDebugValue } from 'react';",
      "",
      "const CustomHook = (val) => {",
      "  useEffect(() => {",
      "    const sum = val + val;",
      "    console.log(sum);",
      "  }, [val]);",
      "  useDebugValue(`val: ${val}`);",
      "}",
      "",
      "export default function App() {",
      "  const [val, setVal] = useState(0);",
      "",
      "  CustomHook(val);",
      "",
      "  return (",
      "    <div>",
      "      <button onClick={() => {",
      "        setVal(val + 1);",
      "      }}>change val</button>",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "snapshot": {
    "prefix": "snapshot",
    "body": [
      "import React from 'react';",
      "import renderer from 'react-test-renderer';",
      "import App from './App';",
      "",
      "describe('App', () => {",
      "  it('renders correctly', () => {",
      "    const tree = renderer.create(<App />).toJSON();",
      "    expect(tree).toMatchSnapshot();",
      "  });",
      "});"
    ]
  },
  "ter": {
    "prefix": "ter",
    "body": [
      "{${1} ? ${2} : ${3}}"
    ]
  },
  "textarea": {
    "prefix": "textarea",
    "body": [
      "<textarea value={text} onChange={(e) => setText(e.target.value)}>",
      "</textarea>"
    ]
  }
}