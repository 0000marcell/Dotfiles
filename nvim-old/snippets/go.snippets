snippet print 
	fmt.Println(${1})

snippet arr
	chars := []string{}

snippet for 
	for i := 0; i < ${1}; i++ {
		${2}
	}

snippet fori
	for i, a := range matrix1 {
		${2}
	}

snippet if 
	if ${1} {
	}

snippet mat
	lvis := make([][]int, 0)
	lvis = append(lvis, append(make([]int, 0), 99, 88))
	lvis = append(lvis, append(make([]int, 0), 77, 66))

snippet switch
	switch x {
	case 1:
	case 2:
	default:
	}

snippet regexp
	var validID = regexp.MustCompile(`[`+str1+`]`)
	var char = validID.Find([]byte(str2))

snippet atoi 
	charN, err := strconv.Atoi(string(char))
	if err != nil {
		fmt.Println("Error during conversion")
		return
	}

snippet split
	strsplit := strings.Split(str, " ")

snippet append 
	${1} = append(${2}, ${3})

snippet removelast 
	ints = ints[:len(ints) - 1]


snippet removefirst 
	ints = ints[1:]

snippet convert 
	var x float64 = float64(0.0)

snippet func 
	func ${1:Name}(${2:arguments}) ${3:returntype}{
	}

snippet struct 
	type ${1:Name} struct {
		${2:prop} ${3:type}
	}

snippet set 
	var exists = struct{}{}

	type set struct {
		m map[Coord]struct{}
	}

	func NewSet() *set {
		s := &set{}
		s.m = make(map[Coord]struct{})
		return s
	}

	func (s *set) Insert(value Coord) bool {
		if _, ok := s.m[value]; ok {
			return false
		}
		s.m[value] = exists
		return true
	}

	func (s *set) Remove(value Coord) {
		delete(s.m, value)
	}

	func (s *set) Contains(value Coord) bool {
		_, c := s.m[value]
		return c
	}
	
	visited := NewSet()

snippet method
	func (${1: c} *${2: Coord}) ${3: Insert}(${4: item}) ${5: []any} {
		${6:}
	}

snippet forl 
	for curr := k.prev; curr != nil; curr = curr.prev {
		curr.Follow()
	}
